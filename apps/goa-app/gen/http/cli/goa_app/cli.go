// Code generated by goa v3.22.6, DO NOT EDIT.
//
// goa-app HTTP client CLI support package
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	oidcc "github.com/example/project-template/apps/goa-app/gen/http/oidc/client"
	statusc "github.com/example/project-template/apps/goa-app/gen/http/status/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"status show",
		"oidc (start|complete|session)",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + " " + "status show" + "\n" +
		os.Args[0] + " " + "oidc start" + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		statusFlags = flag.NewFlagSet("status", flag.ContinueOnError)

		statusShowFlags = flag.NewFlagSet("show", flag.ExitOnError)

		oidcFlags = flag.NewFlagSet("oidc", flag.ContinueOnError)

		oidcStartFlags = flag.NewFlagSet("start", flag.ExitOnError)

		oidcCompleteFlags    = flag.NewFlagSet("complete", flag.ExitOnError)
		oidcCompleteBodyFlag = oidcCompleteFlags.String("body", "REQUIRED", "")

		oidcSessionFlags     = flag.NewFlagSet("session", flag.ExitOnError)
		oidcSessionStateFlag = oidcSessionFlags.String("state", "REQUIRED", "State identifier")
	)
	statusFlags.Usage = statusUsage
	statusShowFlags.Usage = statusShowUsage

	oidcFlags.Usage = oidcUsage
	oidcStartFlags.Usage = oidcStartUsage
	oidcCompleteFlags.Usage = oidcCompleteUsage
	oidcSessionFlags.Usage = oidcSessionUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "status":
			svcf = statusFlags
		case "oidc":
			svcf = oidcFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "status":
			switch epn {
			case "show":
				epf = statusShowFlags

			}

		case "oidc":
			switch epn {
			case "start":
				epf = oidcStartFlags

			case "complete":
				epf = oidcCompleteFlags

			case "session":
				epf = oidcSessionFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "status":
			c := statusc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
			}
		case "oidc":
			c := oidcc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "start":
				endpoint = c.Start()
			case "complete":
				endpoint = c.Complete()
				data, err = oidcc.BuildCompletePayload(*oidcCompleteBodyFlag)
			case "session":
				endpoint = c.Session()
				data, err = oidcc.BuildSessionPayload(*oidcSessionStateFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// statusUsage displays the usage of the status command and its subcommands.
func statusUsage() {
	fmt.Fprintln(os.Stderr, `Provides service status information.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] status COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    show: Returns a simple service status message.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s status COMMAND --help\n", os.Args[0])
}
func statusShowUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] status show", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Returns a simple service status message.`)

	// Flags list

	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], "status show")
}

// oidcUsage displays the usage of the oidc command and its subcommands.
func oidcUsage() {
	fmt.Fprintln(os.Stderr, `OIDC login orchestration endpoints for the Goa sample client.`)
	fmt.Fprintf(os.Stderr, "Usage:\n    %s [globalflags] oidc COMMAND [flags]\n\n", os.Args[0])
	fmt.Fprintln(os.Stderr, "COMMAND:")
	fmt.Fprintln(os.Stderr, `    start: Create a PKCE authorization request and return the redirect URL.`)
	fmt.Fprintln(os.Stderr, `    complete: Exchange an authorization code for tokens.`)
	fmt.Fprintln(os.Stderr, `    session: Retrieve the session associated with the provided state.`)
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Additional help:")
	fmt.Fprintf(os.Stderr, "    %s oidc COMMAND --help\n", os.Args[0])
}
func oidcStartUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] oidc start", os.Args[0])
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Create a PKCE authorization request and return the redirect URL.`)

	// Flags list

	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], "oidc start")
}

func oidcCompleteUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] oidc complete", os.Args[0])
	fmt.Fprint(os.Stderr, " -body JSON")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Exchange an authorization code for tokens.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -body JSON: `)

	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], "oidc complete --body '{\n      \"code\": \"Dolores ut est ab magni officiis nobis.\",\n      \"state\": \"Sed aut eveniet.\"\n   }'")
}

func oidcSessionUsage() {
	// Header with flags
	fmt.Fprintf(os.Stderr, "%s [flags] oidc session", os.Args[0])
	fmt.Fprint(os.Stderr, " -state STRING")
	fmt.Fprintln(os.Stderr)

	// Description
	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, `Retrieve the session associated with the provided state.`)

	// Flags list
	fmt.Fprintln(os.Stderr, `    -state STRING: State identifier`)

	fmt.Fprintln(os.Stderr)
	fmt.Fprintln(os.Stderr, "Example:")
	fmt.Fprintf(os.Stderr, "    %s %s\n", os.Args[0], "oidc session --state \"Voluptatum explicabo fugiat consequuntur harum.\"")
}
