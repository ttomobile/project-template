// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	oidc "github.com/example/project-template/apps/goa-app/gen/oidc"
	oidcviews "github.com/example/project-template/apps/goa-app/gen/oidc/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeStartResponse returns an encoder for responses returned by the oidc
// start endpoint.
func EncodeStartResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*oidcviews.StartResponse)
		enc := encoder(ctx, w)
		body := NewStartResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCompleteResponse returns an encoder for responses returned by the oidc
// complete endpoint.
func EncodeCompleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*oidcviews.SessionResponse)
		enc := encoder(ctx, w)
		body := NewCompleteResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCompleteRequest returns a decoder for requests sent to the oidc
// complete endpoint.
func DecodeCompleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*oidc.CompletePayload, error) {
	return func(r *http.Request) (*oidc.CompletePayload, error) {
		var (
			body CompleteRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCompleteRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCompletePayload(&body)

		return payload, nil
	}
}

// EncodeCompleteError returns an encoder for errors returned by the complete
// oidc endpoint.
func EncodeCompleteError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res oidc.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeSessionResponse returns an encoder for responses returned by the oidc
// session endpoint.
func EncodeSessionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*oidcviews.SessionResponse)
		enc := encoder(ctx, w)
		body := NewSessionResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSessionRequest returns a decoder for requests sent to the oidc session
// endpoint.
func DecodeSessionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (*oidc.SessionPayload, error) {
	return func(r *http.Request) (*oidc.SessionPayload, error) {
		var (
			state string

			params = mux.Vars(r)
		)
		state = params["state"]
		payload := NewSessionPayload(state)

		return payload, nil
	}
}

// EncodeSessionError returns an encoder for errors returned by the session
// oidc endpoint.
func EncodeSessionError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "not_found":
			var res oidc.NotFound
			errors.As(v, &res)
			enc := encoder(ctx, w)
			body := res
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalOidcviewsUserInfoViewToUserInfoResponseBody builds a value of type
// *UserInfoResponseBody from a value of type *oidcviews.UserInfoView.
func marshalOidcviewsUserInfoViewToUserInfoResponseBody(v *oidcviews.UserInfoView) *UserInfoResponseBody {
	res := &UserInfoResponseBody{
		Sub:   *v.Sub,
		Email: *v.Email,
		Name:  v.Name,
	}

	return res
}
