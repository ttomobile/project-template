// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc HTTP server types
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package server

import (
	oidc "github.com/example/project-template/apps/goa-app/gen/oidc"
	oidcviews "github.com/example/project-template/apps/goa-app/gen/oidc/views"
	goa "goa.design/goa/v3/pkg"
)

// CompleteRequestBody is the type of the "oidc" service "complete" endpoint
// HTTP request body.
type CompleteRequestBody struct {
	// State originally issued in the authorization request
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
	// Authorization code returned by the provider
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// StartResponseBody is the type of the "oidc" service "start" endpoint HTTP
// response body.
type StartResponseBody struct {
	// Authorization endpoint URL with query parameters.
	AuthURL string `form:"auth_url" json:"auth_url" xml:"auth_url"`
	// Opaque state value to correlate the login flow.
	State string `form:"state" json:"state" xml:"state"`
}

// CompleteResponseBody is the type of the "oidc" service "complete" endpoint
// HTTP response body.
type CompleteResponseBody struct {
	// Opaque access token issued by the provider.
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// ID token in JWT format.
	IDToken string `form:"id_token" json:"id_token" xml:"id_token"`
	// Seconds until the access token expires.
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// Granted scopes.
	Scope string                `form:"scope" json:"scope" xml:"scope"`
	User  *UserInfoResponseBody `form:"user" json:"user" xml:"user"`
}

// SessionResponseBody is the type of the "oidc" service "session" endpoint
// HTTP response body.
type SessionResponseBody struct {
	// Opaque access token issued by the provider.
	AccessToken string `form:"access_token" json:"access_token" xml:"access_token"`
	// ID token in JWT format.
	IDToken string `form:"id_token" json:"id_token" xml:"id_token"`
	// Seconds until the access token expires.
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
	// Granted scopes.
	Scope string                `form:"scope" json:"scope" xml:"scope"`
	User  *UserInfoResponseBody `form:"user" json:"user" xml:"user"`
}

// UserInfoResponseBody is used to define fields on response body types.
type UserInfoResponseBody struct {
	// Subject identifier
	Sub string `form:"sub" json:"sub" xml:"sub"`
	// Email address
	Email string `form:"email" json:"email" xml:"email"`
	// Display name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewStartResponseBody builds the HTTP response body from the result of the
// "start" endpoint of the "oidc" service.
func NewStartResponseBody(res *oidcviews.StartResponseView) *StartResponseBody {
	body := &StartResponseBody{
		AuthURL: *res.AuthURL,
		State:   *res.State,
	}
	return body
}

// NewCompleteResponseBody builds the HTTP response body from the result of the
// "complete" endpoint of the "oidc" service.
func NewCompleteResponseBody(res *oidcviews.SessionResponseView) *CompleteResponseBody {
	body := &CompleteResponseBody{
		AccessToken: *res.AccessToken,
		IDToken:     *res.IDToken,
		ExpiresIn:   *res.ExpiresIn,
		Scope:       *res.Scope,
	}
	if res.User != nil {
		body.User = marshalOidcviewsUserInfoViewToUserInfoResponseBody(res.User)
	}
	return body
}

// NewSessionResponseBody builds the HTTP response body from the result of the
// "session" endpoint of the "oidc" service.
func NewSessionResponseBody(res *oidcviews.SessionResponseView) *SessionResponseBody {
	body := &SessionResponseBody{
		AccessToken: *res.AccessToken,
		IDToken:     *res.IDToken,
		ExpiresIn:   *res.ExpiresIn,
		Scope:       *res.Scope,
	}
	if res.User != nil {
		body.User = marshalOidcviewsUserInfoViewToUserInfoResponseBody(res.User)
	}
	return body
}

// NewCompletePayload builds a oidc service complete endpoint payload.
func NewCompletePayload(body *CompleteRequestBody) *oidc.CompletePayload {
	v := &oidc.CompletePayload{
		State: *body.State,
		Code:  *body.Code,
	}

	return v
}

// NewSessionPayload builds a oidc service session endpoint payload.
func NewSessionPayload(state string) *oidc.SessionPayload {
	v := &oidc.SessionPayload{}
	v.State = state

	return v
}

// ValidateCompleteRequestBody runs the validations defined on
// CompleteRequestBody
func ValidateCompleteRequestBody(body *CompleteRequestBody) (err error) {
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	return
}
