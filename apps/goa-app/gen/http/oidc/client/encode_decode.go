// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	oidc "github.com/example/project-template/apps/goa-app/gen/oidc"
	oidcviews "github.com/example/project-template/apps/goa-app/gen/oidc/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildStartRequest instantiates a HTTP request object with method and path
// set to call the "oidc" service "start" endpoint
func (c *Client) BuildStartRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StartOidcPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oidc", "start", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStartResponse returns a decoder for responses returned by the oidc
// start endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStartResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body StartResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "start", err)
			}
			p := NewStartResponseViewOK(&body)
			view := "default"
			vres := &oidcviews.StartResponse{Projected: p, View: view}
			if err = oidcviews.ValidateStartResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("oidc", "start", err)
			}
			res := oidc.NewStartResponse(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oidc", "start", resp.StatusCode, string(body))
		}
	}
}

// BuildCompleteRequest instantiates a HTTP request object with method and path
// set to call the "oidc" service "complete" endpoint
func (c *Client) BuildCompleteRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CompleteOidcPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oidc", "complete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCompleteRequest returns an encoder for requests sent to the oidc
// complete server.
func EncodeCompleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*oidc.CompletePayload)
		if !ok {
			return goahttp.ErrInvalidType("oidc", "complete", "*oidc.CompletePayload", v)
		}
		body := NewCompleteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("oidc", "complete", err)
		}
		return nil
	}
}

// DecodeCompleteResponse returns a decoder for responses returned by the oidc
// complete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCompleteResponse may return the following errors:
//   - "not_found" (type oidc.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeCompleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CompleteResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "complete", err)
			}
			p := NewCompleteSessionResponseOK(&body)
			view := "default"
			vres := &oidcviews.SessionResponse{Projected: p, View: view}
			if err = oidcviews.ValidateSessionResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("oidc", "complete", err)
			}
			res := oidc.NewSessionResponse(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "complete", err)
			}
			return nil, NewCompleteNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oidc", "complete", resp.StatusCode, string(body))
		}
	}
}

// BuildSessionRequest instantiates a HTTP request object with method and path
// set to call the "oidc" service "session" endpoint
func (c *Client) BuildSessionRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		state string
	)
	{
		p, ok := v.(*oidc.SessionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("oidc", "session", "*oidc.SessionPayload", v)
		}
		state = p.State
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SessionOidcPath(state)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("oidc", "session", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSessionResponse returns a decoder for responses returned by the oidc
// session endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeSessionResponse may return the following errors:
//   - "not_found" (type oidc.NotFound): http.StatusNotFound
//   - error: internal error
func DecodeSessionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SessionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "session", err)
			}
			p := NewSessionResponseViewOK(&body)
			view := "default"
			vres := &oidcviews.SessionResponse{Projected: p, View: view}
			if err = oidcviews.ValidateSessionResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("oidc", "session", err)
			}
			res := oidc.NewSessionResponse(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("oidc", "session", err)
			}
			return nil, NewSessionNotFound(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("oidc", "session", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserInfoResponseBodyToOidcviewsUserInfoView builds a value of type
// *oidcviews.UserInfoView from a value of type *UserInfoResponseBody.
func unmarshalUserInfoResponseBodyToOidcviewsUserInfoView(v *UserInfoResponseBody) *oidcviews.UserInfoView {
	res := &oidcviews.UserInfoView{
		Sub:   v.Sub,
		Email: v.Email,
		Name:  v.Name,
	}

	return res
}
