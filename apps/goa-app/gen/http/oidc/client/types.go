// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc HTTP client types
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package client

import (
	oidc "github.com/example/project-template/apps/goa-app/gen/oidc"
	oidcviews "github.com/example/project-template/apps/goa-app/gen/oidc/views"
	goa "goa.design/goa/v3/pkg"
)

// CompleteRequestBody is the type of the "oidc" service "complete" endpoint
// HTTP request body.
type CompleteRequestBody struct {
	// State originally issued in the authorization request
	State string `form:"state" json:"state" xml:"state"`
	// Authorization code returned by the provider
	Code string `form:"code" json:"code" xml:"code"`
}

// StartResponseBody is the type of the "oidc" service "start" endpoint HTTP
// response body.
type StartResponseBody struct {
	// Authorization endpoint URL with query parameters.
	AuthURL *string `form:"auth_url,omitempty" json:"auth_url,omitempty" xml:"auth_url,omitempty"`
	// Opaque state value to correlate the login flow.
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// CompleteResponseBody is the type of the "oidc" service "complete" endpoint
// HTTP response body.
type CompleteResponseBody struct {
	// Opaque access token issued by the provider.
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// ID token in JWT format.
	IDToken *string `form:"id_token,omitempty" json:"id_token,omitempty" xml:"id_token,omitempty"`
	// Seconds until the access token expires.
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// Granted scopes.
	Scope *string               `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	User  *UserInfoResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// SessionResponseBody is the type of the "oidc" service "session" endpoint
// HTTP response body.
type SessionResponseBody struct {
	// Opaque access token issued by the provider.
	AccessToken *string `form:"access_token,omitempty" json:"access_token,omitempty" xml:"access_token,omitempty"`
	// ID token in JWT format.
	IDToken *string `form:"id_token,omitempty" json:"id_token,omitempty" xml:"id_token,omitempty"`
	// Seconds until the access token expires.
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
	// Granted scopes.
	Scope *string               `form:"scope,omitempty" json:"scope,omitempty" xml:"scope,omitempty"`
	User  *UserInfoResponseBody `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// UserInfoResponseBody is used to define fields on response body types.
type UserInfoResponseBody struct {
	// Subject identifier
	Sub *string `form:"sub,omitempty" json:"sub,omitempty" xml:"sub,omitempty"`
	// Email address
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Display name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewCompleteRequestBody builds the HTTP request body from the payload of the
// "complete" endpoint of the "oidc" service.
func NewCompleteRequestBody(p *oidc.CompletePayload) *CompleteRequestBody {
	body := &CompleteRequestBody{
		State: p.State,
		Code:  p.Code,
	}
	return body
}

// NewStartResponseViewOK builds a "oidc" service "start" endpoint result from
// a HTTP "OK" response.
func NewStartResponseViewOK(body *StartResponseBody) *oidcviews.StartResponseView {
	v := &oidcviews.StartResponseView{
		AuthURL: body.AuthURL,
		State:   body.State,
	}

	return v
}

// NewCompleteSessionResponseOK builds a "oidc" service "complete" endpoint
// result from a HTTP "OK" response.
func NewCompleteSessionResponseOK(body *CompleteResponseBody) *oidcviews.SessionResponseView {
	v := &oidcviews.SessionResponseView{
		AccessToken: body.AccessToken,
		IDToken:     body.IDToken,
		ExpiresIn:   body.ExpiresIn,
		Scope:       body.Scope,
	}
	v.User = unmarshalUserInfoResponseBodyToOidcviewsUserInfoView(body.User)

	return v
}

// NewCompleteNotFound builds a oidc service complete endpoint not_found error.
func NewCompleteNotFound(body string) oidc.NotFound {
	v := oidc.NotFound(body)

	return v
}

// NewSessionResponseViewOK builds a "oidc" service "session" endpoint result
// from a HTTP "OK" response.
func NewSessionResponseViewOK(body *SessionResponseBody) *oidcviews.SessionResponseView {
	v := &oidcviews.SessionResponseView{
		AccessToken: body.AccessToken,
		IDToken:     body.IDToken,
		ExpiresIn:   body.ExpiresIn,
		Scope:       body.Scope,
	}
	v.User = unmarshalUserInfoResponseBodyToOidcviewsUserInfoView(body.User)

	return v
}

// NewSessionNotFound builds a oidc service session endpoint not_found error.
func NewSessionNotFound(body string) oidc.NotFound {
	v := oidc.NotFound(body)

	return v
}

// ValidateUserInfoResponseBody runs the validations defined on
// UserInfoResponseBody
func ValidateUserInfoResponseBody(body *UserInfoResponseBody) (err error) {
	if body.Sub == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sub", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}
