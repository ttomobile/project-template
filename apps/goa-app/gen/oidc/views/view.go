// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc views
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// StartResponse is the viewed result type that is projected based on a view.
type StartResponse struct {
	// Type to project
	Projected *StartResponseView
	// View to render
	View string
}

// SessionResponse is the viewed result type that is projected based on a view.
type SessionResponse struct {
	// Type to project
	Projected *SessionResponseView
	// View to render
	View string
}

// StartResponseView is a type that runs validations on a projected type.
type StartResponseView struct {
	// Authorization endpoint URL with query parameters.
	AuthURL *string
	// Opaque state value to correlate the login flow.
	State *string
}

// SessionResponseView is a type that runs validations on a projected type.
type SessionResponseView struct {
	// Opaque access token issued by the provider.
	AccessToken *string
	// ID token in JWT format.
	IDToken *string
	// Seconds until the access token expires.
	ExpiresIn *int
	// Granted scopes.
	Scope *string
	User  *UserInfoView
}

// UserInfoView is a type that runs validations on a projected type.
type UserInfoView struct {
	// Subject identifier
	Sub *string
	// Email address
	Email *string
	// Display name
	Name *string
}

var (
	// StartResponseMap is a map indexing the attribute names of StartResponse by
	// view name.
	StartResponseMap = map[string][]string{
		"default": {
			"auth_url",
			"state",
		},
	}
	// SessionResponseMap is a map indexing the attribute names of SessionResponse
	// by view name.
	SessionResponseMap = map[string][]string{
		"default": {
			"access_token",
			"id_token",
			"expires_in",
			"scope",
			"user",
		},
	}
)

// ValidateStartResponse runs the validations defined on the viewed result type
// StartResponse.
func ValidateStartResponse(result *StartResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateStartResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateSessionResponse runs the validations defined on the viewed result
// type SessionResponse.
func ValidateSessionResponse(result *SessionResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSessionResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateStartResponseView runs the validations defined on StartResponseView
// using the "default" view.
func ValidateStartResponseView(result *StartResponseView) (err error) {
	if result.AuthURL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("auth_url", "result"))
	}
	if result.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("state", "result"))
	}
	return
}

// ValidateSessionResponseView runs the validations defined on
// SessionResponseView using the "default" view.
func ValidateSessionResponseView(result *SessionResponseView) (err error) {
	if result.AccessToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("access_token", "result"))
	}
	if result.IDToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id_token", "result"))
	}
	if result.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "result"))
	}
	if result.Scope == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("scope", "result"))
	}
	if result.User == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user", "result"))
	}
	if result.User != nil {
		if err2 := ValidateUserInfoView(result.User); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserInfoView runs the validations defined on UserInfoView.
func ValidateUserInfoView(result *UserInfoView) (err error) {
	if result.Sub == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sub", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	return
}
