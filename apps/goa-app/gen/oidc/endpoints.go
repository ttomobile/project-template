// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc endpoints
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package oidc

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "oidc" service endpoints.
type Endpoints struct {
	Start    goa.Endpoint
	Complete goa.Endpoint
	Session  goa.Endpoint
}

// NewEndpoints wraps the methods of the "oidc" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Start:    NewStartEndpoint(s),
		Complete: NewCompleteEndpoint(s),
		Session:  NewSessionEndpoint(s),
	}
}

// Use applies the given middleware to all the "oidc" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Start = m(e.Start)
	e.Complete = m(e.Complete)
	e.Session = m(e.Session)
}

// NewStartEndpoint returns an endpoint function that calls the method "start"
// of service "oidc".
func NewStartEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.Start(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedStartResponse(res, "default")
		return vres, nil
	}
}

// NewCompleteEndpoint returns an endpoint function that calls the method
// "complete" of service "oidc".
func NewCompleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CompletePayload)
		res, err := s.Complete(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSessionResponse(res, "default")
		return vres, nil
	}
}

// NewSessionEndpoint returns an endpoint function that calls the method
// "session" of service "oidc".
func NewSessionEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SessionPayload)
		res, err := s.Session(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSessionResponse(res, "default")
		return vres, nil
	}
}
