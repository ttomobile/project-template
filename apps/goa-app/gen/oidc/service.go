// Code generated by goa v3.22.6, DO NOT EDIT.
//
// oidc service
//
// Command:
// $ goa gen github.com/example/project-template/apps/goa-app/design

package oidc

import (
	"context"

	oidcviews "github.com/example/project-template/apps/goa-app/gen/oidc/views"
)

// OIDC login orchestration endpoints for the Goa sample client.
type Service interface {
	// Create a PKCE authorization request and return the redirect URL.
	Start(context.Context) (res *StartResponse, err error)
	// Exchange an authorization code for tokens.
	Complete(context.Context, *CompletePayload) (res *SessionResponse, err error)
	// Retrieve the session associated with the provided state.
	Session(context.Context, *SessionPayload) (res *SessionResponse, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "goa-app"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "oidc"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"start", "complete", "session"}

// CompletePayload is the payload type of the oidc service complete method.
type CompletePayload struct {
	// State originally issued in the authorization request
	State string
	// Authorization code returned by the provider
	Code string
}

// SessionPayload is the payload type of the oidc service session method.
type SessionPayload struct {
	// State identifier
	State string
}

// SessionResponse is the result type of the oidc service complete method.
type SessionResponse struct {
	// Opaque access token issued by the provider.
	AccessToken string
	// ID token in JWT format.
	IDToken string
	// Seconds until the access token expires.
	ExpiresIn int
	// Granted scopes.
	Scope string
	User  *UserInfo
}

// StartResponse is the result type of the oidc service start method.
type StartResponse struct {
	// Authorization endpoint URL with query parameters.
	AuthURL string
	// Opaque state value to correlate the login flow.
	State string
}

// Subset of user attributes returned by the provider.
type UserInfo struct {
	// Subject identifier
	Sub string
	// Email address
	Email string
	// Display name
	Name *string
}

// State could not be matched to a login attempt.
type NotFound string

// Error returns an error description.
func (e NotFound) Error() string {
	return "State could not be matched to a login attempt."
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// NewStartResponse initializes result type StartResponse from viewed result
// type StartResponse.
func NewStartResponse(vres *oidcviews.StartResponse) *StartResponse {
	return newStartResponse(vres.Projected)
}

// NewViewedStartResponse initializes viewed result type StartResponse from
// result type StartResponse using the given view.
func NewViewedStartResponse(res *StartResponse, view string) *oidcviews.StartResponse {
	p := newStartResponseView(res)
	return &oidcviews.StartResponse{Projected: p, View: "default"}
}

// NewSessionResponse initializes result type SessionResponse from viewed
// result type SessionResponse.
func NewSessionResponse(vres *oidcviews.SessionResponse) *SessionResponse {
	return newSessionResponse(vres.Projected)
}

// NewViewedSessionResponse initializes viewed result type SessionResponse from
// result type SessionResponse using the given view.
func NewViewedSessionResponse(res *SessionResponse, view string) *oidcviews.SessionResponse {
	p := newSessionResponseView(res)
	return &oidcviews.SessionResponse{Projected: p, View: "default"}
}

// newStartResponse converts projected type StartResponse to service type
// StartResponse.
func newStartResponse(vres *oidcviews.StartResponseView) *StartResponse {
	res := &StartResponse{}
	if vres.AuthURL != nil {
		res.AuthURL = *vres.AuthURL
	}
	if vres.State != nil {
		res.State = *vres.State
	}
	return res
}

// newStartResponseView projects result type StartResponse to projected type
// StartResponseView using the "default" view.
func newStartResponseView(res *StartResponse) *oidcviews.StartResponseView {
	vres := &oidcviews.StartResponseView{
		AuthURL: &res.AuthURL,
		State:   &res.State,
	}
	return vres
}

// newSessionResponse converts projected type SessionResponse to service type
// SessionResponse.
func newSessionResponse(vres *oidcviews.SessionResponseView) *SessionResponse {
	res := &SessionResponse{}
	if vres.AccessToken != nil {
		res.AccessToken = *vres.AccessToken
	}
	if vres.IDToken != nil {
		res.IDToken = *vres.IDToken
	}
	if vres.ExpiresIn != nil {
		res.ExpiresIn = *vres.ExpiresIn
	}
	if vres.Scope != nil {
		res.Scope = *vres.Scope
	}
	if vres.User != nil {
		res.User = transformOidcviewsUserInfoViewToUserInfo(vres.User)
	}
	return res
}

// newSessionResponseView projects result type SessionResponse to projected
// type SessionResponseView using the "default" view.
func newSessionResponseView(res *SessionResponse) *oidcviews.SessionResponseView {
	vres := &oidcviews.SessionResponseView{
		AccessToken: &res.AccessToken,
		IDToken:     &res.IDToken,
		ExpiresIn:   &res.ExpiresIn,
		Scope:       &res.Scope,
	}
	if res.User != nil {
		vres.User = transformUserInfoToOidcviewsUserInfoView(res.User)
	}
	return vres
}

// transformOidcviewsUserInfoViewToUserInfo builds a value of type *UserInfo
// from a value of type *oidcviews.UserInfoView.
func transformOidcviewsUserInfoViewToUserInfo(v *oidcviews.UserInfoView) *UserInfo {
	if v == nil {
		return nil
	}
	res := &UserInfo{
		Sub:   *v.Sub,
		Email: *v.Email,
		Name:  v.Name,
	}

	return res
}

// transformUserInfoToOidcviewsUserInfoView builds a value of type
// *oidcviews.UserInfoView from a value of type *UserInfo.
func transformUserInfoToOidcviewsUserInfoView(v *UserInfo) *oidcviews.UserInfoView {
	res := &oidcviews.UserInfoView{
		Sub:   &v.Sub,
		Email: &v.Email,
		Name:  v.Name,
	}

	return res
}
